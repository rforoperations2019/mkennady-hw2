library(tidyverse)
library(tidycensus)
vars <- load_variables(2017, "acs5", cache = TRUE)
View(vars)
public.health.insurance <- get_acs(geography = "county",
variables = c("B01003_001","B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
View(public.health.insurance)
library(magrittr)
library(dplyr)
public.health.insurance <- get_acs(geography = "county",
variables = c("B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
pop <- get_acs(geography = "county",
variables = c("B01003_001"),
state = "TX",
geometry = TRUE,
year = 2017)
View(pop)
merge(public.health.insurance, pop, x = GEOID, y = GEOID)
merge(public.health.insurance, pop, x = "GEOID", y = "GEOID")
merge(public.health.insurance, pop, by = "GEOID")
public.health.insurance <- left_join(public.health.insurance, pop, by = "GEOID")
class(pop)
public.health.insurance <- st_join(public.health.insurance, pop, by = "GEOID")
install.packages("sf")
library(sf)
public.health.insurance <- st_join(public.health.insurance, pop, by = "GEOID")
View(public.health.insurance)
public.health.insurance <- st_join(public.health.insurance, pop, by = "GEOID = GEOID")
public.health.insurance <- get_acs(geography = "county",
variables = c("B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
public.health.insurance <- st_join(public.health.insurance, pop, by = "GEOID = GEOID")
public.health.insurance <- get_acs(geography = "county",
variables = c("B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
test <- st_join(public.health.insurance, pop, by = c("GEOID", "GEOID"))
View(test)
public.health.insurance %>%
mutate(perc_HI = )
test <- semi_join(public.health.insurance, pop, by = c("GEOID", "GEOID"))
test <- st_join(public.health.insurance, pop, by = "GEOID")
test <- st_join(public.health.insurance, pop, by = c("GEOID" = "GEOID"))
a
test <- st_join(public.health.insurance, pop, by = c("GEOID" = "GEOID"))
View(test)
test <- st_join(public.health.insurance, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
geometries <- select(pop, "GEOID", "geometry")
View(geometries)
pop$geometry <- NULL
public.health.insurance$geometry <- NULL
test <- st_join(public.health.insurance, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
test <- inner_join(public.health.insurance, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
View(test)
public.health.insurance$moe <- NULL
pop$moe <- NULL
test %>%
mutate(perc_HI = estimate.x / estimate.y)
test %<>%
mutate(perc_HI = estimate.x / estimate.y)
library(stringr)
View(geometries)
library(tidyverse)
library(tidycensus)
library(magrittr)
library(dplyr)
library(sf)
library(stringr)
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
cbind(geometries)
# Reference: https://walkerke.github.io/tidycensus/articles/basic-usage.html
# Reference: https://juliasilge.com/blog/using-tidycensus/
vars <- load_variables(2017, "acs5", cache = TRUE)
# persons on public health insurance from census
public.HI <- get_acs(geography = "county",
variables = c("B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
pop <- get_acs(geography = "county",
variables = c("B01003_001"),
state = "TX",
geometry = TRUE,
year = 2017)
# Separate
geometries <- select(pop, "GEOID", "geometry")
public.HI$geometry <- NULL
pop$geometry <- NULL
public.HI$moe <- NULL
pop$moe <- NULL
View(public.HI)
View(pop)
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
cbind(geometries)
texas_pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
public.HI.pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
class(public.HI.pop
)
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
cbind(geometries) %>%
as.data.frame()
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
cbind(geometries) %>%
as.data.frame()
class(public.HI.pop)
public.HI.pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
library(leaflet)
library(leaflet.extras)
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
library(rgdal)
colnames(public.HI.pop)
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
cbind(geometries) %>%
as.data.frame()
colnames(public.HI.pop)
View(public.HI.pop)
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
View(public.HI.pop)
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
inner_join(geometries, by = "GEOID")
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate))
colnames(public.HI.pop)
addPolygons(color = ~pal(`perc_HI`)
leaflet(public.HI.pop) %>%
kk
leaflet(public.HI.pop) %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(color = ~pal(`perc_HI`))
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(perc_HI))
public.HI.pop %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(perc_HI))
public.HI.pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(perc_HI))
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
inner_join(geometries, by = "GEOID")
public.HI.pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(perc_HI))
pal <- colorQuantile(palette = "viridis", domain = public.HI.pop$perc_HI, n = 10)
public.HI.pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(perc_HI))
?st_transform
library(tidyverse)
library(tidycensus)
texas_pop <- get_acs(geography = "county",
variables = "B01003_001",
state = "TX",
geometry = TRUE)
library(leaflet)
library(stringr)
library(sf)
pal <- colorQuantile(palette = "viridis", domain = texas_pop$estimate, n = 10)
texas_pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate)) %>%
addLegend("bottomright",
pal = pal,
values = ~ estimate,
title = "Population percentiles",
opacity = 1)
library(tidyverse)
library(tidycensus)
texas_pop <- get_acs(geography = "county",
variables = "B27015_002",
state = "TX",
geometry = TRUE)
library(leaflet)
library(stringr)
library(sf)
pal <- colorQuantile(palette = "viridis", domain = texas_pop$estimate, n = 10)
texas_pop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate)) %>%
addLegend("bottomright",
pal = pal,
values = ~ estimate,
title = "Population percentiles",
opacity = 1)
readOGR(public.HI.pop)
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
View(public.HI.pop)
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y) %>%
inner_join(geometries, by = "GEOID")
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
pop <- get_acs(geography = "county",
variables = c("B01003_001"),
state = "TX",
geometry = TRUE,
year = 2017)
# persons on public health insurance from census
public.HI <- get_acs(geography = "county",
variables = c("B27015_002"),
state = "TX",
geometry = TRUE,
year = 2017)
geometries <- select(pop, "GEOID", "geometry")
public.HI$geometry <- NULL
pop$geometry <- NULL
public.HI$moe <- NULL
pop$moe <- NULL
public.HI.pop <- inner_join(public.HI, pop, by = c("GEOID" = "GEOID", "NAME" = "NAME"))
public.HI.pop %<>%
mutate(perc_HI = estimate.x / estimate.y)
test@data <- merge(geometries@data, public.HI.pop, sort = FALSE, by.x = "GEOID", by.y = "GEOID")
kk
public.HI.pop@data <- merge(geometries@data, public.HI.pop, sort = FALSE, by.x = "GEOID", by.y = "GEOID")
